// <auto-generated />
using System;
using Dream_House.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dream_House.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250627151243_InitialMigrate")]
    partial class InitialMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dream_House.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор роли (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Название роли (например, \"admin\", \"user\")");

                    b.HasKey("Id")
                        .HasName("role_pkey");

                    b.HasIndex(new[] { "Name" }, "unique_role_name")
                        .IsUnique();

                    b.ToTable("role", null, t =>
                        {
                            t.HasComment("Хранит роли пользователей (например, администратор, пользователь)");
                        });
                });

            modelBuilder.Entity("Dream_House.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор пользователя (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth")
                        .HasComment("Дата рождения пользователя");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email")
                        .HasComment("Email пользователя, используется для входа");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("hash_password")
                        .HasComment("Хэшированный пароль пользователя");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasComment("Имя пользователя");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number")
                        .HasComment("Номер телефона пользователя");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Дата регистрации пользователя");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id")
                        .HasComment("Ссылка на роль пользователя (таблица role)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname")
                        .HasComment("Фамилия пользователя");

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "unique_email")
                        .IsUnique();

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Хранит информацию о зарегистрированных пользователях сервиса");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.ad", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор объявления (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("ad_num")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Номер дома");

                    b.Property<decimal?>("area_obj")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasComment("Площадь объекта в квадратных метрах");

                    b.Property<int?>("city_district_id")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на городской район (таблица city_district)");

                    b.Property<int>("city_id")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на город (таблица city)");

                    b.Property<decimal?>("cost")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasComment("Стоимость объекта в указанной валюте");

                    b.Property<int>("count_of_rooms")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text")
                        .HasComment("Описание объявления");

                    b.Property<int?>("district_id")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на район (таблица district)");

                    b.Property<int?>("microdistrict_id")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на микрорайон (таблица microdistrict)");

                    b.Property<int>("source_id")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на источник объявления (таблица source)");

                    b.Property<int>("stage")
                        .HasColumnType("integer");

                    b.Property<int>("status_id")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на статус объявления (таблица status)");

                    b.Property<int?>("street_id")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на улицу (таблица street)");

                    b.Property<int>("type_id")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на тип объекта (таблица type_obj)");

                    b.HasKey("id")
                        .HasName("ad_pkey");

                    b.HasIndex("city_district_id");

                    b.HasIndex("district_id");

                    b.HasIndex("microdistrict_id");

                    b.HasIndex("street_id");

                    b.HasIndex(new[] { "city_id" }, "idx_ad_city_id");

                    b.HasIndex(new[] { "source_id" }, "idx_ad_source_id");

                    b.HasIndex(new[] { "status_id" }, "idx_ad_status_id");

                    b.HasIndex(new[] { "type_id" }, "idx_ad_type_id");

                    b.HasIndex(new[] { "source_id", "ad_num" }, "unique_source_ad_num")
                        .IsUnique();

                    b.ToTable("ad", null, t =>
                        {
                            t.HasComment("Хранит информацию об объявлениях о квартирах");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.ad_parametre", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор параметра (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_ad")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на объявление (таблица ad)");

                    b.Property<string>("param_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Название параметра (например, \"этаж\", \"балкон\")");

                    b.Property<string>("value_param")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Значение параметра (например, \"5\", \"true\")");

                    b.HasKey("id")
                        .HasName("ad_parametres_pkey");

                    b.HasIndex(new[] { "id_ad" }, "idx_ad_parametres_id_ad");

                    b.ToTable("ad_parametres", t =>
                        {
                            t.HasComment("Хранит дополнительные параметры объявлений (например, этаж, наличие балкона)");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.city", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор города (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("city_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Название города (например, \"Москва\")");

                    b.HasKey("id")
                        .HasName("city_pkey");

                    b.HasIndex(new[] { "city_name" }, "unique_city_name")
                        .IsUnique();

                    b.ToTable("city", null, t =>
                        {
                            t.HasComment("Хранит информацию о городах");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.city_district", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор городского района (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("city_district_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Название городского района (например, \"Тверской\")");

                    b.HasKey("id")
                        .HasName("city_district_pkey");

                    b.HasIndex(new[] { "city_district_name" }, "unique_city_district_name")
                        .IsUnique();

                    b.ToTable("city_district", null, t =>
                        {
                            t.HasComment("Хранит информацию о городских районах (например, подрайоны внутри города)");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.district", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор района (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("district_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Название района (например, \"Центральный\")");

                    b.HasKey("id")
                        .HasName("district_pkey");

                    b.HasIndex(new[] { "district_name" }, "unique_district_name")
                        .IsUnique();

                    b.ToTable("district", null, t =>
                        {
                            t.HasComment("Хранит информацию о районах (например, административные районы города)");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.favorite", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор записи избранного (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_ad")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на объявление (таблица ad)");

                    b.Property<int>("id_user")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на пользователя (таблица user)");

                    b.HasKey("id")
                        .HasName("favorites_pkey");

                    b.HasIndex(new[] { "id_ad" }, "idx_favorites_id_ad");

                    b.HasIndex(new[] { "id_user" }, "idx_favorites_id_user");

                    b.HasIndex(new[] { "id_user", "id_ad" }, "unique_user_ad")
                        .IsUnique();

                    b.ToTable("favorites", t =>
                        {
                            t.HasComment("Хранит информацию об объявлениях, добавленных пользователями в избранное");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.image_ad", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор изображения (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("id_ad")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на объявление (таблица ad)");

                    b.Property<string>("url_img")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("URL изображения на сайте-источнике или в хранилище");

                    b.Property<bool?>("основное")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Флаг, указывающий, является ли изображение основным для превью");

                    b.HasKey("id")
                        .HasName("image_ad_pkey");

                    b.HasIndex(new[] { "id_ad" }, "idx_image_ad_id_ad");

                    b.ToTable("image_ad", null, t =>
                        {
                            t.HasComment("Хранит изображения, связанные с объявлениями");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.microdistrict", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор микрорайона (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("microdistrict_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Название микрорайона (например, \"Патриаршие пруды\")");

                    b.HasKey("id")
                        .HasName("microdistrict_pkey");

                    b.HasIndex(new[] { "microdistrict_name" }, "unique_microdistrict_name")
                        .IsUnique();

                    b.ToTable("microdistrict", null, t =>
                        {
                            t.HasComment("Хранит информацию о микрорайонах");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.parsing_log", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор записи лога (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("added_record")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasComment("Количество добавленных объявлений");

                    b.Property<int?>("deleted_record")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasComment("Количество помеченных как неактивные объявлений");

                    b.Property<DateTime?>("end_time")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Время окончания парсинга");

                    b.Property<string>("error_msg")
                        .HasColumnType("text")
                        .HasComment("Сообщение об ошибке, если парсинг не удался");

                    b.Property<int>("id_source")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на источник (таблица source)");

                    b.Property<DateTime>("start_time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Время начала парсинга");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Статус выполнения парсинга (success, failed, partial)");

                    b.Property<int?>("update_record")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasComment("Количество обновлённых объявлений");

                    b.HasKey("id")
                        .HasName("parsing_logs_pkey");

                    b.HasIndex(new[] { "id_source" }, "idx_parsing_logs_id_source");

                    b.ToTable("parsing_logs", t =>
                        {
                            t.HasComment("Хранит логи работы парсера для мониторинга и отладки");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.price_history", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор записи в истории (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("change_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Дата изменения цены");

                    b.Property<int>("id_ad")
                        .HasColumnType("integer")
                        .HasComment("Ссылка на объявление (таблица ad)");

                    b.Property<decimal>("price")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasComment("Цена на момент записи");

                    b.HasKey("id")
                        .HasName("price_history_pkey");

                    b.HasIndex(new[] { "id_ad" }, "idx_price_history_id_ad");

                    b.ToTable("price_history", null, t =>
                        {
                            t.HasComment("Хранит историю изменений цен для каждого объявления");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.source", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор источника (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("last_parsing_date")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Дата и время последнего парсинга источника");

                    b.Property<string>("source_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Название сайта-источника (например, \"Авито\", \"ЦИАН\")");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Базовый URL сайта-источника");

                    b.HasKey("id")
                        .HasName("source_pkey");

                    b.HasIndex(new[] { "source_name" }, "unique_source_name")
                        .IsUnique();

                    b.ToTable("source", null, t =>
                        {
                            t.HasComment("Хранит информацию о сайтах-источниках объявлений");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.status", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор статуса (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("status_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Название статуса (например, \"активно\", \"продано\", \"удалено\")");

                    b.HasKey("id")
                        .HasName("status_pkey");

                    b.HasIndex(new[] { "status_name" }, "unique_status_name")
                        .IsUnique();

                    b.ToTable("status", null, t =>
                        {
                            t.HasComment("Хранит статусы объявлений");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.street", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор улицы (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("street_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Название улицы (например, \"Тверская улица\")");

                    b.HasKey("id")
                        .HasName("street_pkey");

                    b.HasIndex(new[] { "street_name" }, "unique_street_name")
                        .IsUnique();

                    b.ToTable("street", null, t =>
                        {
                            t.HasComment("Хранит информацию об улицах");
                        });
                });

            modelBuilder.Entity("hackaton_asp_project.Models.type_obj", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Уникальный идентификатор типа объекта (автоинкремент)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("type_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Название типа объекта (например, \"аренда\", \"продажа\")");

                    b.HasKey("id")
                        .HasName("type_obj_pkey");

                    b.HasIndex(new[] { "type_name" }, "unique_type_name")
                        .IsUnique();

                    b.ToTable("type_obj", null, t =>
                        {
                            t.HasComment("Хранит типы объектов недвижимости (например, аренда, продажа)");
                        });
                });

            modelBuilder.Entity("Dream_House.Models.User", b =>
                {
                    b.HasOne("Dream_House.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.ad", b =>
                {
                    b.HasOne("hackaton_asp_project.Models.city_district", "city_district")
                        .WithMany("ads")
                        .HasForeignKey("city_district_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_city_district");

                    b.HasOne("hackaton_asp_project.Models.city", "city")
                        .WithMany("ads")
                        .HasForeignKey("city_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_city");

                    b.HasOne("hackaton_asp_project.Models.district", "district")
                        .WithMany("ads")
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_district");

                    b.HasOne("hackaton_asp_project.Models.microdistrict", "microdistrict")
                        .WithMany("ads")
                        .HasForeignKey("microdistrict_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_microdistrict");

                    b.HasOne("hackaton_asp_project.Models.source", "source")
                        .WithMany("ads")
                        .HasForeignKey("source_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_source");

                    b.HasOne("hackaton_asp_project.Models.status", "status")
                        .WithMany("ads")
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_status");

                    b.HasOne("hackaton_asp_project.Models.street", "street")
                        .WithMany("ads")
                        .HasForeignKey("street_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_street");

                    b.HasOne("hackaton_asp_project.Models.type_obj", "type")
                        .WithMany("ads")
                        .HasForeignKey("type_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_type_obj");

                    b.Navigation("city");

                    b.Navigation("city_district");

                    b.Navigation("district");

                    b.Navigation("microdistrict");

                    b.Navigation("source");

                    b.Navigation("status");

                    b.Navigation("street");

                    b.Navigation("type");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.ad_parametre", b =>
                {
                    b.HasOne("hackaton_asp_project.Models.ad", "id_adNavigation")
                        .WithMany("ad_parametres")
                        .HasForeignKey("id_ad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ad");

                    b.Navigation("id_adNavigation");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.favorite", b =>
                {
                    b.HasOne("hackaton_asp_project.Models.ad", "id_adNavigation")
                        .WithMany("favorites")
                        .HasForeignKey("id_ad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ad");

                    b.HasOne("Dream_House.Models.User", "id_userNavigation")
                        .WithMany("favorites")
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user");

                    b.Navigation("id_adNavigation");

                    b.Navigation("id_userNavigation");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.image_ad", b =>
                {
                    b.HasOne("hackaton_asp_project.Models.ad", "id_adNavigation")
                        .WithMany("image_ads")
                        .HasForeignKey("id_ad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ad");

                    b.Navigation("id_adNavigation");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.parsing_log", b =>
                {
                    b.HasOne("hackaton_asp_project.Models.source", "id_sourceNavigation")
                        .WithMany("parsing_logs")
                        .HasForeignKey("id_source")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_source");

                    b.Navigation("id_sourceNavigation");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.price_history", b =>
                {
                    b.HasOne("hackaton_asp_project.Models.ad", "id_adNavigation")
                        .WithMany("price_histories")
                        .HasForeignKey("id_ad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ad");

                    b.Navigation("id_adNavigation");
                });

            modelBuilder.Entity("Dream_House.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dream_House.Models.User", b =>
                {
                    b.Navigation("favorites");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.ad", b =>
                {
                    b.Navigation("ad_parametres");

                    b.Navigation("favorites");

                    b.Navigation("image_ads");

                    b.Navigation("price_histories");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.city", b =>
                {
                    b.Navigation("ads");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.city_district", b =>
                {
                    b.Navigation("ads");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.district", b =>
                {
                    b.Navigation("ads");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.microdistrict", b =>
                {
                    b.Navigation("ads");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.source", b =>
                {
                    b.Navigation("ads");

                    b.Navigation("parsing_logs");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.status", b =>
                {
                    b.Navigation("ads");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.street", b =>
                {
                    b.Navigation("ads");
                });

            modelBuilder.Entity("hackaton_asp_project.Models.type_obj", b =>
                {
                    b.Navigation("ads");
                });
#pragma warning restore 612, 618
        }
    }
}
